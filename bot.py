import os
import time
import logging
import asyncio
from typing import List, Dict
import aiofiles
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.middlewares.base import BaseMiddleware

FILE_ENCODING = "utf-8"
API_TOKEN = ""
ADMIN_IDS = [,]

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

desktop_path: str = os.path.join(os.path.expanduser("~"), "Desktop")
bot_dir: str = os.path.join(desktop_path, "–ë–û–¢")
os.makedirs(bot_dir, exist_ok=True)
QUESTIONS_FILE: str = os.path.join(bot_dir, "questions.txt")
DATA_FILE: str = os.path.join(bot_dir, "user_data.txt")
os.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)

class ThrottlingMiddleware(BaseMiddleware):
    """
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
    """
    def __init__(self, limit: float = 1.0):
        super().__init__()
        self.limit = limit
        self.last_times: Dict[int, float] = {}

    async def __call__(self, handler, event, data):
        user_id = None
        if isinstance(event, types.Message):
            user_id = event.from_user.id
        elif isinstance(event, types.CallbackQuery):
            user_id = event.from_user.id

        if user_id is not None:
            now = time.monotonic()
            last = self.last_times.get(user_id, 0)
            if now - last < self.limit:
                try:
                    if isinstance(event, types.Message):
                        await event.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–¥–ª–∏—Ç–µ—Å—å.")
                    elif isinstance(event, types.CallbackQuery):
                        await event.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–¥–ª–∏—Ç–µ—Å—å.", show_alert=True)
                except Exception:
                    pass
                raise BaseMiddleware()
            self.last_times[user_id] = now
        return await handler(event, data)

dp.update.middleware.register(ThrottlingMiddleware(limit=1.0))

async def async_append_to_file(file_path: str, text: str) -> None:
    async with aiofiles.open(file_path, mode='a', encoding=FILE_ENCODING) as f:
        await f.write(text)


async def async_rewrite_file(file_path: str, lines: List[str]) -> None:
    async with aiofiles.open(file_path, mode='w', encoding=FILE_ENCODING) as f:
        await f.write("\n".join(lines) + "\n")


async def async_read_file_lines(file_path: str) -> List[str]:
    if not os.path.exists(file_path):
        return []
    async with aiofiles.open(file_path, mode='r', encoding=FILE_ENCODING) as f:
        content = await f.read()
        return content.splitlines()

class SurveyState(StatesGroup):
    waiting_for_answer = State()


class AddQuestionState(StatesGroup):
    waiting_for_question = State()


class BroadcastState(StatesGroup):
    waiting_for_message = State()

def load_questions() -> List[str]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ–±–æ–ª—å—à–æ–π, –ø–æ—ç—Ç–æ–º—É –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ —á—Ç–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ.
    """
    if not os.path.exists(QUESTIONS_FILE):
        return []
    with open(QUESTIONS_FILE, "r", encoding=FILE_ENCODING) as file:
        questions = [line.strip() for line in file if line.strip()]
    logger.info("–í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    return questions


async def save_question(question: str) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–∞–π–ª."""
    await async_append_to_file(QUESTIONS_FILE, question + "\n")
    logger.info(f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {question}")


async def rewrite_questions(questions_list: List[str]) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."""
    await async_rewrite_file(QUESTIONS_FILE, questions_list)
    logger.info("–§–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.")


async def get_unique_users() -> Dict[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–¥–µ –∫–ª—é—á ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–æ–∫–∞), –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî username.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫—Ç–æ —É–∂–µ –Ω–∞—á–∏–Ω–∞–ª –æ–ø—Ä–æ—Å.
    """
    users: Dict[str, str] = {}
    try:
        lines = await async_read_file_lines(DATA_FILE)
        for line in lines:
            line = line.strip()
            if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                parts = line.split(', ')
                if len(parts) >= 2:
                    username = parts[0].split('@')[1]
                    user_id = parts[1].split(': ')[1]
                    if user_id not in users:
                        users[user_id] = username
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return users


async def has_user_taken_survey(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∏–Ω–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–æ—Å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ —Å –¥–∞–Ω–Ω—ã–º–∏.
    """
    users = await get_unique_users()
    return str(user_id) in users


async def get_survey_statistics() -> Dict[str, Dict]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ–ø—Ä–æ—Å–∞.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è:
      - username
      - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "–í–æ–ø—Ä–æ—Å:")
      - —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –≤ –±–ª–æ–∫–µ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω")
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
      { user_id: {"username": ..., "answers": <int>, "completed": <bool>} , ... }
    """
    stats: Dict[str, Dict] = {}
    current_user = None
    try:
        lines = await async_read_file_lines(DATA_FILE)
        for line in lines:
            line = line.strip()
            if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                parts = line.split(', ')
                if len(parts) >= 2:
                    username = parts[0].split('@')[1]
                    user_id = parts[1].split(': ')[1]
                    current_user = user_id
                    stats[current_user] = {"username": username, "answers": 0, "completed": False}
            else:
                if current_user is None:
                    continue
                if line.startswith("–í–æ–ø—Ä–æ—Å:"):
                    stats[current_user]["answers"] += 1
                elif line == "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω":
                    stats[current_user]["completed"] = True
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    return stats

QUESTIONS: List[str] = load_questions()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS

@dp.message(Command("start"))
async def start(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å üìù", callback_data="start_survey")],
        ]
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá\n\n"
        "üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å.\n",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "start_survey")
async def start_survey(callback_query: types.CallbackQuery) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
    """
    user_id = callback_query.from_user.id

    if await has_user_taken_survey(user_id):
        await callback_query.answer("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å!", show_alert=True)
        return

    user_username = callback_query.from_user.username or "–ù–µ—ÇUsername"
    await async_append_to_file(DATA_FILE, f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_username}, ID: {user_id}\n")
    await callback_query.message.answer("üì¢ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å!")
    await send_question(callback_query.message.chat.id, 0)
    await callback_query.answer()


async def send_question(chat_id: int, question_index: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞.
    –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω" –≤ —Ñ–∞–π–ª.
    """
    if question_index < len(QUESTIONS):
        question = QUESTIONS[question_index]
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–î–∞", callback_data=f"answer_{question_index}_yes"),
                    InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"answer_{question_index}_no"),
                    InlineKeyboardButton(text="–í–∞—à –æ—Ç–≤–µ—Ç", callback_data=f"answer_{question_index}_custom")
                ]
            ]
        )
        await bot.send_message(chat_id, question, reply_markup=keyboard)
    else:
        await async_append_to_file(DATA_FILE, "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω\n")
        await bot.send_message(chat_id, "‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")


@dp.callback_query(F.data.startswith("answer_"))
async def process_answer(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–¥–∞/–Ω–µ—Ç –∏–ª–∏ –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞).
    """
    data = callback_query.data.split("_")
    try:
        question_index = int(data[1])
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞.")
        return

    if data[2] == "custom":
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        await state.set_state(SurveyState.waiting_for_answer)
        await state.update_data(question_index=question_index)
        await callback_query.answer()
    else:
        answer = "–î–∞" if data[2] == "yes" else "–ù–µ—Ç"
        await async_append_to_file(DATA_FILE, f"–í–æ–ø—Ä–æ—Å: {QUESTIONS[question_index]} ‚Äî –û—Ç–≤–µ—Ç: {answer}\n")
        logger.info(
            f"–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}. "
            f"–í–æ–ø—Ä–æ—Å {question_index}. –û—Ç–≤–µ—Ç: {answer}"
        )
        await callback_query.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await send_question(callback_query.message.chat.id, question_index + 1)


@dp.message(SurveyState.waiting_for_answer)
async def process_custom_answer(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
    """
    custom_answer = message.text.strip()
    user_data = await state.get_data()
    question_index = user_data.get('question_index')
    if not custom_answer:
        await message.answer("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç.")
        return

    await async_append_to_file(DATA_FILE, f"–í–æ–ø—Ä–æ—Å: {QUESTIONS[question_index]} ‚Äî –û—Ç–≤–µ—Ç: {custom_answer}\n")
    logger.info(
        f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. "
        f"–í–æ–ø—Ä–æ—Å {question_index}. –û—Ç–≤–µ—Ç: {custom_answer}"
    )
    await message.answer(f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {custom_answer}")
    await send_question(message.chat.id, question_index + 1)
    await state.clear()

@dp.message(Command("admin"))
async def admin_panel(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å üìù", callback_data="add_question")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùå", callback_data="delete_question_list")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ üëÄ", callback_data="view_questions")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üîç", callback_data="view_user_answers")],
            [InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è üì¢", callback_data="broadcast_all")],
            [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="survey_stats")]
        ]
    )
    await message.answer("üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query(F.data == "add_question")
async def add_question_callback(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    """
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:\n–ü—Ä–∏–º–µ—Ä: \"–í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–æ—Ñ–µ?\"")
    await state.set_state(AddQuestionState.waiting_for_question)
    await callback_query.answer()


@dp.message(AddQuestionState.waiting_for_question)
async def process_new_question(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ.
    """
    question_text = message.text.strip()
    if not question_text:
        await message.answer("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await save_question(question_text)
    global QUESTIONS
    QUESTIONS = load_questions()
    await message.answer(f"–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {question_text}")
    await state.clear()


@dp.callback_query(F.data == "delete_question_list")
async def delete_question_list(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    if not QUESTIONS:
        await callback_query.message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback_query.answer()
        return

    buttons = []
    for idx, q in enumerate(QUESTIONS):
        display_text = f"{idx + 1}. {q[:30]}{'...' if len(q) > 30 else ''}"
        buttons.append([InlineKeyboardButton(text=display_text, callback_data=f"delete_{idx}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=1)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query(F.data.startswith("delete_"))
async def delete_question(callback_query: types.CallbackQuery) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    try:
        idx = int(callback_query.data.split("_")[1])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    if idx < 0 or idx >= len(QUESTIONS):
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")
        return

    deleted_question = QUESTIONS.pop(idx)
    await rewrite_questions(QUESTIONS)
    await callback_query.message.answer(f"–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω: {deleted_question}")
    await callback_query.answer()


@dp.callback_query(F.data == "view_questions")
async def view_questions(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º.")
        return

    questions_text = "\n".join([f"{idx + 1}. {q}" for idx, q in enumerate(QUESTIONS)])
    if not questions_text:
        questions_text = "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    await callback_query.message.answer(f"üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{questions_text}")
    await callback_query.answer()


@dp.callback_query(F.data == "view_user_answers")
async def view_user_answers(callback_query: types.CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–ø—Ä–æ—Å, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.
    """
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    users = await get_unique_users()
    if not users:
        await callback_query.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        await callback_query.answer()
        return

    buttons = []
    for user_id, username in users.items():
        button_text = f"@{username}" if username != "–ù–µ—ÇUsername" else f"ID: {user_id}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"user_{user_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query(F.data.startswith("user_"))
async def show_user_answers(callback_query: types.CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–≤–µ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.data.split("_")[1]
    responses = []
    try:
        lines = await async_read_file_lines(DATA_FILE)
        current_user = None
        for line in lines:
            line = line.strip()
            if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                parts = line.split(', ')
                current_user_id = parts[1].split(': ')[1]
                current_user = current_user_id if current_user_id == user_id else None
            elif current_user == user_id and line.startswith("–í–æ–ø—Ä–æ—Å:"):
                responses.append(line)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    if not responses:
        await callback_query.message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤.")
    else:
        response_text = "\n".join(responses)
        users = await get_unique_users()
        display_id = f"@{users.get(user_id, user_id)}"
        await callback_query.message.answer(
            f"üìù –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({display_id}):\n\n{response_text}"
        )
    await callback_query.answer()


@dp.callback_query(F.data == "broadcast_all")
async def broadcast_all_callback(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastState.waiting_for_message)
    await callback_query.answer()


@dp.message(BroadcastState.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤—Å–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    broadcast_text = message.text.strip()
    if not broadcast_text:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    users = await get_unique_users()
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()
        return

    sent_count = 0
    for user_id in users.keys():
        try:
            await bot.send_message(int(user_id), broadcast_text)
            sent_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()


@dp.callback_query(F.data == "survey_stats")
async def survey_stats(callback_query: types.CallbackQuery) -> None:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–ø—Ä–æ—Å—É:
      - –û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—á–∞–≤—à–∏—Ö –æ–ø—Ä–æ—Å
      - –ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –æ–ø—Ä–æ—Å
      - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É, –≥–¥–µ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ ID –≤—ã–≤–æ–¥–∏—Ç—Å—è @username (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    """
    stats = await get_survey_statistics()
    total_users = len(stats)
    completed_count = sum(1 for s in stats.values() if s.get("completed"))
    message_lines = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞:",
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}",
        f"–ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {completed_count}",
        "",
        "–î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
    ]
    for user_id, data in stats.items():
        display_id = f"@{data['username']}" if data['username'] != "–ù–µ—ÇUsername" else user_id
        message_lines.append(
            f"ID: {display_id}, –û—Ç–≤–µ—Ç–æ–≤: {data['answers']}, –ó–∞–≤–µ—Ä—à–∏–ª: {'–î–∞' if data['completed'] else '–ù–µ—Ç'}"
        )
    await callback_query.message.answer("\n".join(message_lines))
    await callback_query.answer()

async def main() -> None:
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
