import os
import time
import logging
import asyncio
from typing import List, Dict, Optional, Any
import aiofiles
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from config import Config
from utils import (
    safe_read_file, safe_write_file, safe_append_file,
    cleanup_temp_files, check_disk_space, check_file_size
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding=Config.FILE_ENCODING),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=Config.API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
bot_dir = os.path.join(desktop_path, "–ë–û–¢")
os.makedirs(bot_dir, exist_ok=True)

SURVEYS_DIR = os.path.join(bot_dir, "surveys")
os.makedirs(SURVEYS_DIR, exist_ok=True)
SURVEYS_FILE = os.path.join(SURVEYS_DIR, "surveys.txt")
ACTIVE_SURVEY_FILE = os.path.join(SURVEYS_DIR, "active_survey.txt")
DATA_FILE = os.path.join(bot_dir, "user_data.txt")

class SurveyState(StatesGroup):
    waiting_for_answer = State()

class CreateSurveyState(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_questions = State()

class EditSurveyState(StatesGroup):
    waiting_for_edited_question = State()
    waiting_for_question_number = State()
    waiting_for_new_question = State()

class BroadcastState(StatesGroup):
    waiting_for_message = State()

class Survey:
    def __init__(self, name: str, description: str, questions: List[str], survey_id: Optional[str] = None):
        self.name = name
        self.description = description
        self.questions = questions
        self.survey_id = survey_id or str(int(time.time()))

    def to_dict(self) -> dict:
        return {
            "name": self.name,
            "description": self.description,
            "questions": self.questions,
            "survey_id": self.survey_id
        }

    @classmethod
    def from_dict(cls, data: dict) -> 'Survey':
        return cls(
            name=data["name"],
            description=data["description"],
            questions=data["questions"],
            survey_id=data["survey_id"]
        )

async def load_surveys() -> Dict[str, Survey]:
    try:
        content = await safe_read_file(Config.SURVEYS_FILE)
        if not content:
            return {}

        surveys = {}
        current_survey = None
        current_questions = []

        for line in content.split('\n'):
            line = line.strip()
            if not line:
                continue

            if line.startswith("SURVEY_ID:"):
                if current_survey:
                    surveys[current_survey["id"]] = Survey(
                        name=current_survey["name"],
                        description=current_survey["description"],
                        questions=current_questions,
                        survey_id=current_survey["id"]
                    )
                current_survey = {"id": line.replace("SURVEY_ID:", "").strip()}
                current_questions = []
            elif line.startswith("NAME:"):
                if current_survey:
                    current_survey["name"] = line.replace("NAME:", "").strip()
            elif line.startswith("DESCRIPTION:"):
                if current_survey:
                    current_survey["description"] = line.replace("DESCRIPTION:", "").strip()
            elif line.startswith("- "):
                if current_survey:
                    current_questions.append(line[2:])

        if current_survey:
            surveys[current_survey["id"]] = Survey(
                name=current_survey["name"],
                description=current_survey["description"],
                questions=current_questions,
                survey_id=current_survey["id"]
            )

        return surveys
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {}

async def save_surveys(surveys: Dict[str, Survey]) -> None:
    try:
        lines = []
        for survey in surveys.values():
            lines.extend([
                f"SURVEY_ID: {survey.survey_id}",
                f"NAME: {survey.name}",
                f"DESCRIPTION: {survey.description}"
            ])
            for question in survey.questions:
                lines.append(f"- {question}")
            lines.append("")
        
        await safe_write_file(Config.SURVEYS_FILE, "\n".join(lines))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–æ–≤: {e}")

async def get_active_survey_id() -> Optional[str]:
    try:
        content = await safe_read_file(Config.ACTIVE_SURVEY_FILE)
        return content.strip() if content else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞: {e}")
        return None

async def set_active_survey(survey_id: str) -> None:
    try:
        await safe_write_file(Config.ACTIVE_SURVEY_FILE, survey_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞: {e}")

def is_admin(user_id: int) -> bool:
    return user_id in Config.ADMIN_IDS

@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        active_survey_id = await get_active_survey_id()
        if not active_survey_id:
            if is_admin(user_id):
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üë®‚Äçüíª", callback_data="admin")
                    ]]
                )
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
                    reply_markup=keyboard
                )
            else:
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            return

        surveys = await load_surveys()
        survey = surveys.get(active_survey_id)
        if not survey:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å üìù", callback_data="start_survey")
            ]]
        )
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            f"–î–æ—Å—Ç—É–ø–µ–Ω –æ–ø—Ä–æ—Å: {survey.name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {survey.description}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("admin"))
async def cmd_admin(message: Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å", callback_data="create_survey")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏", callback_data="manage_surveys")],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="view_stats")],
            [InlineKeyboardButton(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤", callback_data="view_user_answers")],
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–æ–≤", callback_data="download_data")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="broadcast")]
        ]
    )
    await message.answer(
        "üéØ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "admin")
async def process_admin_callback(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å üìù", callback_data="create_survey")],
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏ üìä", callback_data="manage_surveys")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìà", callback_data="view_stats")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üîç", callback_data="view_user_answers")],
            [InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–æ–≤ üì•", callback_data="download_data")],
            [InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è üì¢", callback_data="broadcast")]
        ]
    )
    await callback.message.delete()
    await callback.message.answer("üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "create_survey")
async def process_create_survey(callback: CallbackQuery, state: FSMContext) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.", show_alert=True)
        return

    await callback.message.delete()
    await callback.message.answer(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å!\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:"
    )
    await state.set_state(CreateSurveyState.waiting_for_name)
    await callback.answer()

@dp.message(CreateSurveyState.waiting_for_name)
async def process_survey_name(message: Message, state: FSMContext) -> None:
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:")
        return

    await state.update_data(name=name)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.\n"
        "–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–ø—Ä–æ—Å–∞:"
    )
    await state.set_state(CreateSurveyState.waiting_for_description)

@dp.message(CreateSurveyState.waiting_for_description)
async def process_survey_description(message: Message, state: FSMContext) -> None:
    description = message.text.strip()
    if not description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:")
        return

    await state.update_data(description=description)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_adding_questions")
        ]]
    )
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ':",
        reply_markup=keyboard
    )
    await state.set_state(CreateSurveyState.waiting_for_questions)

@dp.message(CreateSurveyState.waiting_for_questions)
async def process_survey_question(message: Message, state: FSMContext) -> None:
    question = message.text.strip()
    if not question:
        await message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
        return

    data = await state.get_data()
    questions = data.get("questions", [])
    
    if len(questions) >= Config.MAX_QUESTIONS:
        await message.answer(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ({Config.MAX_QUESTIONS})")
        return
        
    questions.append(question)
    await state.update_data(questions=questions)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_adding_questions")
        ]]
    )
    await message.answer(
        f"‚úÖ –í–æ–ø—Ä–æ—Å #{len(questions)} –¥–æ–±–∞–≤–ª–µ–Ω.\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "done_adding_questions")
async def process_done_adding_questions(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    questions = data.get("questions", [])

    if not questions:
        await callback.message.answer(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:"
        )
        await callback.answer()
        return

    survey = Survey(
        name=data["name"],
        description=data["description"],
        questions=questions
    )

    surveys = await load_surveys()
    surveys[survey.survey_id] = survey
    await save_surveys(surveys)

    if not await get_active_survey_id():
        await set_active_survey(survey.survey_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        ]]
    )
    await callback.message.answer(
        f"‚úÖ –û–ø—Ä–æ—Å \"{survey.name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø—Ä–æ—Å–æ–º —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏'",
        reply_markup=keyboard
    )
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "start_survey")
async def process_start_survey(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        user_id = callback.from_user.id
        active_survey_id = await get_active_survey_id()
        
        if not active_survey_id:
            await callback.message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
            await callback.answer()
            return

        surveys = await load_surveys()
        survey = surveys.get(active_survey_id)
        if not survey:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞.")
            await callback.answer()
            return

        await state.update_data(
            current_question=0,
            survey_id=active_survey_id,
            answers=[]
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data="answer_yes"),
                    InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data="answer_no")
                ],
                [InlineKeyboardButton(text="–°–≤–æ–π –æ—Ç–≤–µ—Ç ‚úçÔ∏è", callback_data="answer_custom")]
            ]
        )
        await callback.message.delete()
        await callback.message.answer(
            f"–í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(survey.questions)}:\n\n{survey.questions[0]}",
            reply_markup=keyboard
        )
        await state.set_state(SurveyState.waiting_for_answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        answer_type = callback.data.replace("answer_", "")
        if answer_type == "custom":
            await callback.message.delete()
            await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            await callback.answer()
            return

        data = await state.get_data()
        current_question = data.get("current_question", 0)
        survey_id = data.get("survey_id")
        answers = data.get("answers", [])

        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        if not survey:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞.")
            await state.clear()
            await callback.answer()
            return

        answers.append(f"–î–∞" if answer_type == "yes" else "–ù–µ—Ç")
        current_question += 1

        if current_question < len(survey.questions):
            await state.update_data(
                current_question=current_question,
                answers=answers
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data="answer_yes"),
                        InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data="answer_no")
                    ],
                    [InlineKeyboardButton(text="–°–≤–æ–π –æ—Ç–≤–µ—Ç ‚úçÔ∏è", callback_data="answer_custom")]
                ]
            )
            await callback.message.delete()
            await callback.message.answer(
                f"–í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(survey.questions)}:\n\n{survey.questions[current_question]}",
                reply_markup=keyboard
            )
        else:
            user_id = callback.from_user.id
            username = callback.from_user.username or "–ù–µ—ÇUsername"
            
            survey_results = [
                f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}, ID: {user_id}_{survey_id}"
            ]
            for q, a in zip(survey.questions, answers):
                survey_results.extend([
                    f"–í–æ–ø—Ä–æ—Å: {q}",
                    f"–û—Ç–≤–µ—Ç: {a}"
                ])
            survey_results.append("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω\n")
            
            await safe_append_file(Config.DATA_FILE, "\n".join(survey_results))
            
            await callback.message.delete()
            await callback.message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
            )
            await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
    
    await callback.answer()

@dp.message(SurveyState.waiting_for_answer)
async def process_custom_answer(message: Message, state: FSMContext) -> None:
    try:
        answer = message.text.strip()
        if not answer:
            await message.answer("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            return
            
        if len(answer) > Config.MAX_ANSWER_LENGTH:
            await message.answer(f"–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {Config.MAX_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            return

        data = await state.get_data()
        current_question = data.get("current_question", 0)
        survey_id = data.get("survey_id")
        answers = data.get("answers", [])

        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        if not survey:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞.")
            await state.clear()
            return

        answers.append(answer)
        current_question += 1

        if current_question < len(survey.questions):
            await state.update_data(
                current_question=current_question,
                answers=answers
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data="answer_yes"),
                        InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data="answer_no")
                    ],
                    [InlineKeyboardButton(text="–°–≤–æ–π –æ—Ç–≤–µ—Ç ‚úçÔ∏è", callback_data="answer_custom")]
                ]
            )
            await message.answer(
                f"–í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(survey.questions)}:\n\n{survey.questions[current_question]}",
                reply_markup=keyboard
            )
        else:
            user_id = message.from_user.id
            username = message.from_user.username or "–ù–µ—ÇUsername"
            
            survey_results = [
                f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}, ID: {user_id}_{survey_id}"
            ]
            for q, a in zip(survey.questions, answers):
                survey_results.extend([
                    f"–í–æ–ø—Ä–æ—Å: {q}",
                    f"–û—Ç–≤–µ—Ç: {a}"
                ])
            survey_results.append("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω\n")
            
            await safe_append_file(Config.DATA_FILE, "\n".join(survey_results))
            
            await message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
            )
            await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@dp.callback_query(F.data == "manage_surveys")
async def process_manage_surveys(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏.", show_alert=True)
        return

    try:
        surveys = await load_surveys()
        active_survey_id = await get_active_survey_id()

        if not surveys:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
                ]]
            )
            await callback.message.delete()
            await callback.message.answer(
                "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å!",
                reply_markup=keyboard
            )
            await callback.answer()
            return

        buttons = []
        for survey_id, survey in surveys.items():
            status = "‚úÖ " if survey_id == active_survey_id else ""
            buttons.append([
                InlineKeyboardButton(
                    text=f"{status}{survey.name}",
                    callback_data=f"survey_{survey_id}"
                )
            ])

        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("survey_"))
async def process_survey_actions(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("survey_", "")
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        active_survey_id = await get_active_survey_id()
        is_active = survey_id == active_survey_id

        buttons = [
            [InlineKeyboardButton(
                text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if is_active else "‚úÖ –°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º",
                callback_data=f"toggle_active_{survey_id}"
            )],
            [InlineKeyboardButton(
                text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
                callback_data=f"view_questions_{survey_id}"
            )],
            [InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=f"edit_question_{survey_id}"
            )],
            [InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=f"add_question_{survey_id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=f"delete_question_{survey_id}"
            )],
            [InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å",
                callback_data=f"delete_survey_{survey_id}"
            )],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–ø—Ä–æ—Å–æ–≤",
                callback_data="manage_surveys"
            )]
        ]

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        await callback.message.answer(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–º: {survey.name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {survey.description}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(survey.questions)}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π' if is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–ø—Ä–æ—Å–æ–º: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("toggle_active_"))
async def process_toggle_active(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("toggle_active_", "")
        active_survey_id = await get_active_survey_id()

        if survey_id == active_survey_id:
            await set_active_survey("")
            await callback.answer("–û–ø—Ä–æ—Å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        else:
            await set_active_survey(survey_id)
            surveys = await load_surveys()
            survey = surveys.get(survey_id)
            if survey:
                await callback.answer(f"–û–ø—Ä–æ—Å '{survey.name}' —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)

        await process_manage_surveys(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@dp.callback_query(F.data.startswith("view_questions_"))
async def process_view_questions(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("view_questions_", "")
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        questions_text = "\n\n".join([f"{i+1}. {q}" for i, q in enumerate(survey.questions)])
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–ø—Ä–æ—Å–æ–º", callback_data=f"survey_{survey_id}")
            ]]
        )
        await callback.message.delete()
        await callback.message.answer(
            f"üìù –í–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞ \"{survey.name}\":\n\n{questions_text}",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_survey_"))
async def process_delete_survey(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("delete_survey_", "")
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        del surveys[survey_id]
        await save_surveys(surveys)

        active_survey_id = await get_active_survey_id()
        if survey_id == active_survey_id:
            await set_active_survey("")

        await callback.answer(f"–û–ø—Ä–æ—Å '{survey.name}' —É–¥–∞–ª–µ–Ω.", show_alert=True)
        await process_manage_surveys(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@dp.callback_query(F.data == "broadcast")
async def process_broadcast(callback: CallbackQuery, state: FSMContext) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        ]]
    )
    await callback.message.delete()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=keyboard
    )
    await state.set_state(BroadcastState.waiting_for_message)
    await callback.answer()

@dp.message(BroadcastState.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await state.clear()
        return

    try:
        broadcast_text = message.text.strip()
        if not broadcast_text:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
            return

        users = set()
        if os.path.exists(Config.DATA_FILE):
            content = await safe_read_file(Config.DATA_FILE)
            for line in content.split('\n'):
                if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                    try:
                        user_id = line.split(", ID: ")[1].split("_")[0]
                        users.add(int(user_id))
                    except:
                        continue

        if not users:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
                ]]
            )
            await message.answer(
                "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=keyboard
            )
            await state.clear()
            return

        sent_count = 0
        for user_id in users:
            try:
                await bot.send_message(user_id, broadcast_text)
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
            ]]
        )
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@dp.callback_query(F.data == "view_stats")
async def process_view_stats(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)
        return

    try:
        surveys = await load_surveys()
        if not surveys:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
                ]]
            )
            await callback.message.delete()
            await callback.message.answer(
                "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                reply_markup=keyboard
            )
            await callback.answer()
            return

        buttons = []
        for survey_id, survey in surveys.items():
            buttons.append([
                InlineKeyboardButton(
                    text=f"üìä {survey.name}",
                    callback_data=f"stats_{survey_id}"
                )
            ])

        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("stats_"))
async def process_survey_stats(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("stats_", "")
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            await callback.message.answer("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        total_users = 0
        completed_users = 0
        answers_data = {}

        if os.path.exists(Config.DATA_FILE):
            content = await safe_read_file(Config.DATA_FILE)
            current_user_id = None
            current_answers = []
            is_completed = False

            for line in content.split('\n'):
                line = line.strip()
                if not line:
                    continue

                if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                    if current_user_id and is_completed and current_answers:
                        completed_users += 1
                        for q, a in current_answers:
                            answers_data[q] = answers_data.get(q, {})
                            answers_data[q][a] = answers_data[q].get(a, 0) + 1

                    try:
                        user_info = line.split(", ID: ")[1]
                        current_survey = user_info.split("_")[1]
                        if current_survey == survey_id:
                            total_users += 1
                            current_user_id = True
                            current_answers = []
                            is_completed = False
                        else:
                            current_user_id = None
                    except:
                        current_user_id = None

                elif current_user_id:
                    if line.startswith("–í–æ–ø—Ä–æ—Å: "):
                        question = line.replace("–í–æ–ø—Ä–æ—Å: ", "")
                    elif line.startswith("–û—Ç–≤–µ—Ç: "):
                        answer = line.replace("–û—Ç–≤–µ—Ç: ", "")
                        current_answers.append((question, answer))
                    elif line == "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω":
                        is_completed = True

            if current_user_id and is_completed and current_answers:
                completed_users += 1
                for q, a in current_answers:
                    answers_data[q] = answers_data.get(q, {})
                    answers_data[q][a] = answers_data[q].get(a, 0) + 1

        completion_percentage = (completed_users/total_users*100) if total_users > 0 else 0
        
        stats_text = [
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞ \"{survey.name}\"",
            f"\nüìå –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
            f"‚îú‚îÄ üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}",
            f"‚îú‚îÄ ‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {completed_users}",
            f"‚îî‚îÄ üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completion_percentage:.1f}%"
        ]

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ–ø—Ä–æ—Å–æ–≤", callback_data="view_stats")
            ]]
        )

        message = "\n".join(stats_text)
        await callback.message.delete()
        await callback.message.answer(message, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data == "view_user_answers")
async def process_view_user_answers(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤.", show_alert=True)
        return

    try:
        surveys = await load_surveys()
        if not surveys:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
                ]]
            )
            await callback.message.delete()
            await callback.message.answer(
                "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤.",
                reply_markup=keyboard
            )
            await callback.answer()
            return

        buttons = []
        for survey_id, survey in surveys.items():
            buttons.append([
                InlineKeyboardButton(
                    text=f"üìã {survey.name}",
                    callback_data=f"view_answers_survey_{survey_id}"
                )
            ])

        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("view_answers_survey_"))
async def process_view_survey_users(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("view_answers_survey_", "")
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        users = {}
        if os.path.exists(Config.DATA_FILE):
            content = await safe_read_file(Config.DATA_FILE)
            current_user_id = None
            current_username = None
            is_completed = False

            for line in content.split('\n'):
                line = line.strip()
                if not line:
                    continue

                if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                    if current_user_id and is_completed:
                        users[current_user_id] = current_username

                    try:
                        username = line.split(", ID: ")[0].replace("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @", "")
                        user_info = line.split(", ID: ")[1]
                        user_id, current_survey = user_info.split("_")
                        if current_survey == survey_id:
                            current_user_id = user_id
                            current_username = username
                            is_completed = False
                        else:
                            current_user_id = None
                            current_username = None
                    except:
                        current_user_id = None
                        current_username = None

                elif line == "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω" and current_user_id:
                    is_completed = True

            if current_user_id and is_completed:
                users[current_user_id] = current_username

        if not users:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ–ø—Ä–æ—Å–æ–≤", callback_data="view_user_answers")
                ]]
            )
            await callback.message.delete()
            await callback.message.answer(
                f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–ø—Ä–æ—Å \"{survey.name}\"",
                reply_markup=keyboard
            )
            await callback.answer()
            return

        buttons = []
        for user_id, username in users.items():
            display_name = f"@{username}" if username != "–ù–µ—ÇUsername" else f"ID: {user_id}"
            buttons.append([
                InlineKeyboardButton(
                    text=display_name,
                    callback_data=f"user_answers_{user_id}_{survey_id}"
                )
            ])

        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ–ø—Ä–æ—Å–æ–≤", callback_data="view_user_answers")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –æ–ø—Ä–æ—Å–µ \"{survey.name}\":",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("user_answers_"))
async def process_user_answers(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤.", show_alert=True)
        return

    try:
        data_parts = callback.data.split("_")
        if len(data_parts) != 4:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback.data}")
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            
        user_id = data_parts[2]
        survey_id = data_parts[3]
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –æ–ø—Ä–æ—Å–µ {survey_id}")
        
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            logger.error(f"–û–ø—Ä–æ—Å {survey_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"view_answers_survey_{survey_id}")
                ]]
            )
            await callback.message.delete()
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
            await callback.answer()
            return

        user_answers = []
        username = None
        
        if not os.path.exists(Config.DATA_FILE):
            logger.error("–§–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise FileNotFoundError("–§–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        content = await safe_read_file(Config.DATA_FILE)
        if not content:
            logger.error("–§–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            raise ValueError("–§–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø—É—Å—Ç")

        is_target_user = False
        current_question = None
        
        for line in content.split('\n'):
            line = line.strip()
            if not line:
                continue

            if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                try:
                    current_username = line.split(", ID: ")[0].replace("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @", "")
                    user_info = line.split(", ID: ")[1]
                    current_user_id, current_survey = user_info.split("_")
                    
                    if current_user_id == user_id and current_survey == survey_id:
                        is_target_user = True
                        username = current_username
                        user_answers = []
                        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id})")
                    else:
                        is_target_user = False
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    is_target_user = False

            elif is_target_user:
                if line.startswith("–í–æ–ø—Ä–æ—Å: "):
                    current_question = line.replace("–í–æ–ø—Ä–æ—Å: ", "")
                elif line.startswith("–û—Ç–≤–µ—Ç: ") and current_question:
                    answer = line.replace("–û—Ç–≤–µ—Ç: ", "")
                    user_answers.append((current_question, answer))

        if not user_answers:
            logger.warning(f"–û—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –æ–ø—Ä–æ—Å–µ {survey_id}")
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"view_answers_survey_{survey_id}")
                ]]
            )
            await callback.message.delete()
            await callback.message.answer(
                "–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=keyboard
            )
            await callback.answer()
            return

        display_name = f"@{username}" if username != "–ù–µ—ÇUsername" else f"ID: {user_id}"
        message_lines = [
            f"üìã –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name}",
            f"–û–ø—Ä–æ—Å: {survey.name}\n"
        ]

        for question, answer in user_answers:
            message_lines.extend([
                f"–í–æ–ø—Ä–æ—Å: {question}",
                f"–û—Ç–≤–µ—Ç: {answer}\n"
            ])

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"view_answers_survey_{survey_id}")
            ]]
        )

        message = "\n".join(message_lines)
        await callback.message.delete()
        
        if len(message) > 4096:
            for i in range(0, len(message), 4096):
                part = message[i:i+4096]
                if i + 4096 >= len(message):
                    await callback.message.answer(part, reply_markup=keyboard)
                else:
                    await callback.message.answer(part)
        else:
            await callback.message.answer(message, reply_markup=keyboard)
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –æ–ø—Ä–æ—Å–∞ {survey_id}")

    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        await callback.message.answer("–§–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_question_"))
async def process_edit_question_select(callback: CallbackQuery, state: FSMContext) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("edit_question_", "")
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        await state.update_data(survey_id=survey_id)
        
        buttons = []
        for i, question in enumerate(survey.questions, 1):
            buttons.append([
                InlineKeyboardButton(
                    text=f"–í–æ–ø—Ä–æ—Å {i}",
                    callback_data=f"select_question_{i}"
                )
            ])
        
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"survey_{survey_id}")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n" +
            "\n".join(f"{i}. {q}" for i, q in enumerate(survey.questions, 1)),
            reply_markup=keyboard
        )
        await state.set_state(EditSurveyState.waiting_for_question_number)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("select_question_"), EditSurveyState.waiting_for_question_number)
async def process_edit_question(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        question_num = int(callback.data.replace("select_question_", ""))
        data = await state.get_data()
        survey_id = data.get("survey_id")
        
        await state.update_data(question_number=question_num)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"survey_{survey_id}")
            ]]
        )
        await callback.message.delete()
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=keyboard
        )
        await state.set_state(EditSurveyState.waiting_for_edited_question)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.message(EditSurveyState.waiting_for_edited_question)
async def process_save_edited_question(message: Message, state: FSMContext) -> None:
    try:
        new_question = message.text.strip()
        if not new_question:
            await message.answer("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
            return

        data = await state.get_data()
        survey_id = data.get("survey_id")
        question_num = data.get("question_number")

        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        if not survey:
            await message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        survey.questions[question_num - 1] = new_question
        await save_surveys(surveys)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–ø—Ä–æ—Å–æ–º", callback_data=f"survey_{survey_id}")
            ]]
        )
        await message.answer(
            "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=keyboard
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@dp.callback_query(F.data.startswith("delete_question_"))
async def process_delete_question_select(callback: CallbackQuery, state: FSMContext) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("delete_question_", "")
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        if len(survey.questions) <= 1:
            await callback.message.answer(
                "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞. –û–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å."
            )
            await callback.answer()
            return

        await state.update_data(survey_id=survey_id)
        
        buttons = []
        for i, question in enumerate(survey.questions, 1):
            buttons.append([
                InlineKeyboardButton(
                    text=f"–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å {i}",
                    callback_data=f"confirm_delete_question_{i}"
                )
            ])
        
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"survey_{survey_id}")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n" +
            "\n".join(f"{i}. {q}" for i, q in enumerate(survey.questions, 1)),
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_question_"))
async def process_delete_question(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        question_num = int(callback.data.replace("confirm_delete_question_", ""))
        data = await state.get_data()
        survey_id = data.get("survey_id")
        
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        if not survey:
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        survey.questions.pop(question_num - 1)
        await save_surveys(surveys)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–ø—Ä–æ—Å–æ–º", callback_data=f"survey_{survey_id}")
            ]]
        )
        await callback.message.delete()
        await callback.message.answer(
            "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=keyboard
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("add_question_"))
async def process_add_question(callback: CallbackQuery, state: FSMContext) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("add_question_", "")
        await state.update_data(survey_id=survey_id)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"survey_{survey_id}")
            ]]
        )
        await callback.message.delete()
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=keyboard
        )
        await state.set_state(EditSurveyState.waiting_for_new_question)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.message(EditSurveyState.waiting_for_new_question)
async def process_save_new_question(message: Message, state: FSMContext) -> None:
    try:
        new_question = message.text.strip()
        if not new_question:
            await message.answer("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
            return

        data = await state.get_data()
        survey_id = data.get("survey_id")

        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        if not survey:
            await message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        survey.questions.append(new_question)
        await save_surveys(surveys)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–ø—Ä–æ—Å–æ–º", callback_data=f"survey_{survey_id}")
            ]]
        )
        await message.answer(
            "‚úÖ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=keyboard
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@dp.callback_query(F.data == "download_data")
async def process_download_data(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    try:
        surveys = await load_surveys()
        if not surveys:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
                ]]
            )
            await callback.message.delete()
            await callback.message.answer(
                "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=keyboard
            )
            await callback.answer()
            return

        buttons = []
        for survey_id, survey in surveys.items():
            buttons.append([
                InlineKeyboardButton(
                    text=f"üì• {survey.name}",
                    callback_data=f"download_survey_{survey_id}"
                )
            ])

        buttons.append([
            InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="download_all_data")
        ])
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("download_survey_"))
async def process_download_survey_data(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    try:
        survey_id = callback.data.replace("download_survey_", "")
        surveys = await load_surveys()
        survey = surveys.get(survey_id)
        
        if not survey:
            await callback.message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        temp_file_path = os.path.join(bot_dir, f"survey_data_{survey_id}.txt")
        
        survey_data = [
            f"–î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞: {survey.name}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {survey.description}",
            f"ID –æ–ø—Ä–æ—Å–∞: {survey_id}",
            "\n–í–æ–ø—Ä–æ—Å—ã:",
        ]
        for i, question in enumerate(survey.questions, 1):
            survey_data.append(f"{i}. {question}")
        
        survey_data.append("\n–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        
        if os.path.exists(Config.DATA_FILE):
            content = await safe_read_file(Config.DATA_FILE)
            current_user_data = []
            
            for line in content.split('\n'):
                line = line.strip()
                if not line:
                    continue
                
                if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                    if current_user_data:
                        survey_data.extend(current_user_data)
                        current_user_data = []
                    
                    try:
                        user_info = line.split(", ID: ")[1]
                        current_survey = user_info.split("_")[1]
                        if current_survey == survey_id:
                            current_user_data.append(f"\n{line}")
                        else:
                            current_user_data = []
                    except:
                        current_user_data = []
                        
                elif current_user_data:
                    current_user_data.append(line)
            
            if current_user_data:
                survey_data.extend(current_user_data)

        async with aiofiles.open(temp_file_path, 'w', encoding=Config.FILE_ENCODING) as f:
            await f.write('\n'.join(survey_data))

        await callback.message.delete()
        await callback.message.answer_document(
            FSInputFile(temp_file_path, filename=f"survey_data_{survey.name}.txt"),
            caption=f"üìä –î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ \"{survey.name}\""
        )

        try:
            os.remove(temp_file_path)
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(F.data == "download_all_data")
async def process_download_all_data(callback: CallbackQuery) -> None:
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    try:
        surveys = await load_surveys()
        if not surveys:
            await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            await callback.answer()
            return

        temp_file_path = os.path.join(bot_dir, "all_surveys_data.txt")
        
        all_data = ["–î–ê–ù–ù–´–ï –í–°–ï–• –û–ü–†–û–°–û–í\n"]
        
        for survey_id, survey in surveys.items():
            all_data.extend([
                f"\n{'='*50}",
                f"–û–ø—Ä–æ—Å: {survey.name}",
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {survey.description}",
                f"ID –æ–ø—Ä–æ—Å–∞: {survey_id}",
                "\n–í–æ–ø—Ä–æ—Å—ã:"
            ])
            
            for i, question in enumerate(survey.questions, 1):
                all_data.append(f"{i}. {question}")
            
            all_data.append("\n–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            
            if os.path.exists(Config.DATA_FILE):
                content = await safe_read_file(Config.DATA_FILE)
                current_user_data = []
                
                for line in content.split('\n'):
                    line = line.strip()
                    if not line:
                        continue
                    
                    if line.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @"):
                        if current_user_data:
                            all_data.extend(current_user_data)
                            current_user_data = []
                        
                        try:
                            user_info = line.split(", ID: ")[1]
                            current_survey = user_info.split("_")[1]
                            if current_survey == survey_id:
                                current_user_data.append(f"\n{line}")
                            else:
                                current_user_data = []
                        except:
                            current_user_data = []
                            
                    elif current_user_data:
                        current_user_data.append(line)
                
                if current_user_data:
                    all_data.extend(current_user_data)

        async with aiofiles.open(temp_file_path, 'w', encoding=Config.FILE_ENCODING) as f:
            await f.write('\n'.join(all_data))

        await callback.message.delete()
        await callback.message.answer_document(
            FSInputFile(temp_file_path, filename="all_surveys_data.txt"),
            caption="üìä –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤"
        )

        try:
            os.remove(temp_file_path)
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def main() -> None:
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 